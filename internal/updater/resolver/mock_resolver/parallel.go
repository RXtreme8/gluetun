// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rxtreme8/gluetun/internal/updater/resolver (interfaces: Parallel)

// Package mock_resolver is a generated GoMock package.
package mock_resolver

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resolver "github.com/rxtreme8/gluetun/internal/updater/resolver"
)

// MockParallel is a mock of Parallel interface.
type MockParallel struct {
	ctrl     *gomock.Controller
	recorder *MockParallelMockRecorder
}

// MockParallelMockRecorder is the mock recorder for MockParallel.
type MockParallelMockRecorder struct {
	mock *MockParallel
}

// NewMockParallel creates a new mock instance.
func NewMockParallel(ctrl *gomock.Controller) *MockParallel {
	mock := &MockParallel{ctrl: ctrl}
	mock.recorder = &MockParallelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParallel) EXPECT() *MockParallelMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockParallel) Resolve(arg0 context.Context, arg1 []string, arg2 resolver.ParallelSettings) (map[string][]net.IP, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]net.IP)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resolve indicates an expected call of Resolve.
func (mr *MockParallelMockRecorder) Resolve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockParallel)(nil).Resolve), arg0, arg1, arg2)
}
